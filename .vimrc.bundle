set nocompatible               " be iMproved

if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Edit {{{
  " NERD_commenter.vim :toggle comment via <Leader>c<space>
  NeoBundle 'scrooloose/nerdcommenter.git'

   " visually indent guide
  NeoBundle 'nathanaelkane/vim-indent-guides'

   " vim-easy-align
   " https://github.com/junegunn/vim-easy-align
   NeoBundleLazy 'junegunn/vim-easy-align', {
   \  'autoload' : {
   \      'commands' : ['EasyAlign']
   \  },
   \}

   " YankRing.vim
   NeoBundle 'YankRing.vim'

   " viaualstar : search *
   NeoBundle 'thinca/vim-visualstar'

   " surround.vim : surround text and comment with parentheses
   NeoBundle 'surround.vim'

   " vim-operator-user : easy operator definition
   NeoBundle 'operator-user'

   " textobj-user : make vim object easily
   NeoBundle 'textobj-user'

   " vim-textobj-syntax : change selected text to text object
   NeoBundle 'kana/vim-textobj-syntax.git'

   " vim-textobj-plugins : change to text object
   NeoBundle 'thinca/vim-textobj-plugins.git'

   " vim-textobj-indent : convert indented text to text object
   NeoBundle 'kana/vim-textobj-indent.git'

   " vim-textobj-function : convert function text to text object
   NeoBundle 'kana/vim-textobj-function.git'

   " vim-textobj-fold : convet folded text to text object
   NeoBundle 'kana/vim-textobj-fold.git'
   NeoBundleLazy 'textobj-rubyblock' , {
   \  'autoload' : {
   \      'filetypes': 'ruby'
   \  },
   \}

   " vim-textobj-entire : convert buffer to text-object
   NeoBundle 'textobj-entire'

   " neocomplete.vim
   NeoBundleLazy 'Shougo/neocomplete', {
   \  'disabled' : !has('lua'),
   \  'autoload' : {
   \     'insert' : 1
   \  },
   \}

   " autocomplete require in ruby
   NeoBundleLazy 'ujihisa/neco-ruby' , {
   \  'autoload' : {
   \      'filetypes': 'ruby'
   \  },
   \}

   " highlight markdown code block
   NeoBundleLazy 'joker1007/vim-markdown-quote-syntax', {
   \  'autoload' : {
   \     'insert' : 1,
   \     'filetypes' : 'markdown',
   \  },
   \}

   NeoBundleLazy 'osyo-manga/vim-over', {
   \  'autoload' : {
   \      'commands' : ['OverCommandLine']
   \  },
   \}
" }}}

" Searching/Moving{{{
   " vim-smartword : smart word moving
   NeoBundle 'smartword'

   " matchit.vim : move to corresponding parentheses via %
   NeoBundle 'matchit.zip'

   " expand ruby matchit
   NeoBundleLazy 'yasuoza/ruby-matchit' , {
   \  'autoload' : {
   \      'filetypes': 'ruby'
   \  },
   \}

   " open-browser.vim : open url or search under coursor
   NeoBundleLazy 'tyru/open-browser.vim', {
   \  'autoload' : {
   \      'commands' : ['OpenBrowser', 'OpenBrowserSearch']
   \  },
   \}

   " ag.vim
   NeoBundle 'rking/ag.vim'
" }}}

" Programming {{{
   " quickrun.vim
   NeoBundle 'thinca/vim-quickrun'

   " vim-ruby
   NeoBundleLazy 'vim-ruby/vim-ruby' , {
   \  'autoload' : {
   \      'filetypes': 'ruby'
   \  },
   \}

   " Show tablist on source
   NeoBundleLazy 'majutsushi/tagbar', {
   \  'autoload' : {
   \      'commands' : ['TagbarToggle']
   \  },
   \}
" }}}

" " Syntax {{{
   " JavaScript
   NeoBundleLazy 'JavaScript-syntax' , {
   \  'autoload' : {
   \      'filetypes': 'javascript'
   \  },
   \}

   " nginx conf
   NeoBundleLazy 'nginx.vim' , {
   \  'autoload' : {
   \      'filetypes': 'nginx'
   \  },
   \}

   " markdown
   NeoBundleLazy 'tpope/vim-markdown' , {
   \  'autoload' : {
   \      'filetypes': 'markdown'
   \  },
   \}

   " coffee script
   NeoBundleLazy 'kchmck/vim-coffee-script' , {
   \  'autoload' : {
   \      'filetypes': 'coffee',
   \      'functions': 'markdown_quote_syntax#include_other_syntax'
   \  },
   \}

   " vim-slim
   NeoBundleLazy 'slim-template/vim-slim.git' , {
   \  'autoload' : {
   \      'filetypes': 'slim'
   \  },
   \}
 " }}}

 " Buffer {{{
   " minibufexpl.vim: manage buffers like tab window
   NeoBundle 'fholgado/minibufexpl.vim'

   " NERDTree : explorer like tree
   NeoBundleLazy 'The-NERD-tree', {
   \  'autoload' : {
   \      'commands' : ['NERDTreeToggle']
   \  },
   \}

   " ctrlp.vim: Full path fuzzy file, buffer, mru, tag, ... finder for Vim
   NeoBundleLazy 'kien/ctrlp.vim', {
   \  'autoload' : {
   \      'mappings' : ['<c-\>'],
   \      'commands' : ['CtrlP']
   \  },
   \}
 " }}}

 " Utility {{{
   " vimproc : asynchronous execution from vimshell
   NeoBundle 'Shougo/vimproc.git', { 'build': {
   \   'mac' : 'make -f make_mac.mak',
   \   'unix': 'make -f make_unix.mak',
   \  },
   \}

  " GIT from vim
   NeoBundle 'tpope/vim-fugitive'

  " Cool status line
  NeoBundle 'bling/vim-airline'

  "Indent-Guides
  NeoBundle 'Indent-Guides'
" }}}

" ColorSchema{{{{

  NeoBundle 'w0ng/vim-hybrid'

" }}}

" Unite {{{{
   NeoBundleLazy 'Shougo/unite.vim', {
   \  'autoload' : {
   \      'commands' : ['Unite']
   \  },
   \}

   NeoBundleLazy 'tsukkee/unite-help', {
   \  'autoload' : {
   \      'commands' : ['Unite']
   \  },
   \}

   NeoBundleLazy 'h1mesuke/unite-outline', {
   \  'autoload' : {
   \      'commands' : ['Unite']
   \  },
   \}

   " NeoBundle 'Sixeight/unite-grep'

   NeoBundleLazy 'basyura/unite-rails', {
   \  'autoload' : {
   \      'commands' : ['Unite']
   \  },
   \}

   NeoBundleLazy 'thinca/vim-unite-history', {
   \  'autoload' : {
   \      'commands' : ['Unite']
   \  },
   \}

   NeoBundleLazy 'tsukkee/unite-tag', {
   \  'autoload' : {
   \      'commands' : ['Unite']
   \  },
   \}

   NeoBundleLazy 'choplin/unite-vim_hacks', {
   \  'autoload' : {
   \      'commands' : ['Unite']
   \  },
   \}
" }}}


filetype plugin indent on

NeoBundleCheck
