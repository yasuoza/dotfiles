"-------------------------------------------------------------------------------
"Edit
"-------------------------------------------------------------------------------

" IMF off after insert mode
set noimdisable
set iminsert=0 imsearch=0
set noimcmdline
inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>

" add word under curosr via ye
nmap ye ;let @"=expand("<cword>")<CR>
" raplace selected range with p when visual mode
vnoremap p <Esc>;let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" convert Tab to space
set expandtab

" auto space after comma
inoremap , ,<Space>
" auto insert close tag in xml
augroup MyXML
  autocmd!
  autocmd Filetype xml inoremap <buffer> </ </<C-x><C-o>
augroup END

"  enable undo word/line deletion in insert mode
inoremap <C-u>  <C-g>u<C-u>
inoremap <C-w>  <C-g>u<C-w>

" change indent mode via :Pt
command! Pt :set paste!

" put yanked words via <C-o> in insert mode
inoremap <C-o> <ESC>:<C-U>YRPaste 'p'<CR>i

" yank to line end via y9
nmap y9 y$
" yank to line head via y0
nmap y0 y^

"
" autocomplete parentheses
"inoremap { {}<LEFT>
"inoremap [ []<LEFT>
"inoremap ( ()<LEFT>
"inoremap " ""<LEFT>
"inoremap ' ''<LEFT>
"vnoremap { "zdi^V{<C-R>z}<ESC>
"vnoremap [ "zdi^V[<C-R>z]<ESC>
"vnoremap ( "zdi^V(<C-R>z)<ESC>
"vnoremap " "zdi^V"<C-R>z^V"<ESC>
"vnoremap ' "zdi'<C-R>z'<ESC>

" delete line end whitespace
autocmd BufWritePre * :%s/\s\+$//ge
" convert tab to space when save file
autocmd BufWritePre * :%s/\t/  /ge

" autocomplete date
inoremap <expr> ,df strftime('%Y/%m/%d %H:%M:%S')
inoremap <expr> ,dd strftime('%Y/%m/%d')
inoremap <expr> ,dt strftime('%H:%M:%S')

" entrust fold to FileType
set foldmethod=syntax
" fold start whren all loaded
set foldlevelstart=99
" .vim is marker
autocmd FileType vim :set foldmethod=marker

" <leader>j formats JSONformat
" http://wozozo.hatenablog.com/entry/2012/02/08/121504
map <Leader>j !python -m json.tool<CR>

" close quickfix via q/ESC
autocmd FileType qf nnoremap <buffer> q :ccl<CR>
autocmd FileType qf nnoremap <buffer> <ESC> :ccl<CR>

" toggle quickfix window via cw
function! s:toggle_qf_window()
  for bufnr in range(1,  winnr('$'))
    if getwinvar(bufnr,  '&buftype') ==# 'quickfix'
      execute 'ccl'
      return
    endif
  endfor
  execute 'botright cw'
endfunction
nnoremap <silent> cw :call <SID>toggle_qf_window()<CR>

" Highlight over 80 columns
" highlight OverLength ctermbg=red ctermfg=white guibg=#592929
" match OverLength /\%81v.\+/

" Enable perltidy by command ,ptv
map ,ptv <Esc>:'<,'>! perltidy<CR>

" tie perl.vim to perl file
autocmd FileType perl :compiler perl
