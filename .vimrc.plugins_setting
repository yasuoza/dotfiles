"-------------------------------------------------------------------------------
"  Plugins
"-------------------------------------------------------------------------------

"------------------------------------
" yankround.vim
"------------------------------------
nmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
let g:yankround_max_history = 50
nnoremap <silent>g<C-p> :<C-u>CtrlPYankRound<CR>

"------------------------------------
" MiniBufExplorer
"------------------------------------
"set minibfexp
let g:miniBufExplMapWindowNavVim=1 "move hjkl
let g:miniBufExplSplitBelow=0  " Put new window above
let g:miniBufExplMapWindowNavArrows=1
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufExplModSelTarget=1
let g:miniBufExplSplitToEdge=1
let g:miniBufExplMaxSize = 10

"toggle MiniBufferExporeer via :Mt
command! Mt :TMiniBufExplorer

"------------------------------------
" vim-easy-align
"------------------------------------
" to use vim-easy-align in Japanese environment
vnoremap <silent> <Enter> :EasyAlign<Enter>

"------------------------------------
" NERD_commenter.vim
"------------------------------------
" put space between comment
let NERDSpaceDelims = 1
"toggle comemnt via <Leader>
map <Leader>x, c<space>
" do not show error although opening incorrect file
let NERDShutUp=1

"------------------------------------
" CtrlP
"------------------------------------
if executable('ag')
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ctrlp_user_command = 'ag %s --nocolor --nogroup --ignore ".hg" --ignore ".svn" --ignore ".git" --ignore ".bzr" --hidden -g ""'
endif
let g:ctrlp_map = '<c-\>'
let g:ctrlp_show_hidden = 1

" ------------------------------------
" grep.vim
"------------------------------------
" exclude search file and directory
let Grep_Skip_Dirs = '.svn .git .hg'
let Grep_Skip_Files = '*.bak *~'
let Grep_Find_Use_Xargs = 0

"------------------------------------
" Fugitive.vim
"------------------------------------
nnoremap <Space>gd :<C-u>Gdiff<Enter>
nnoremap <Space>gs :<C-u>Gstatus<Enter>
nnoremap <Space>gl :<C-u>Glog<Enter>
nnoremap <Space>ga :<C-u>Gwrite<Enter>
nnoremap <Space>gc :<C-u>Gcommit<Enter>
nnoremap <Space>gC :<C-u>Git commit --amend<Enter>
nnoremap <Space>gb :<C-u>Gblame<Enter>

"------------------------------------
" DumbBuf.vim
"------------------------------------
"BufferList via <Leader>b<Space>
let dumbbuf_hotkey = '<Leader>b<Space>'
let dumbbuf_mappings = {
    \ 'n': {
        \'<Esc>': { 'opt': '<silent>', 'mapto': ':<C-u>close<CR>' }
    \}
\}
let dumbbuf_single_key  = 1
let dumbbuf_updatetime  = 1
let dumbbuf_wrap_cursor = 0
let dumbbuf_remove_marked_when_close = 1

"------------------------------------
" gundo.Vim
"------------------------------------
" nmap U :<C-u>GundoToggle<CR>

"------------------------------------
" Tagbar.Vim
"------------------------------------
" The Vim class outline viewer
let g:tagbar_width = 30
let g:tagbar_left = 1
let g:tagbar_sort = 0
nmap <silent> <leader>t :TagbarToggle<CR>

"------------------------------------
" open-blowser.vim
"------------------------------------
" open url under cursor
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

"------------------------------------
" operator-camelize.vim
"------------------------------------
" convert Camel-case
map <Leader>u <Plug>(operator-camelize)
map <Leader>U <Plug>(operator-decamelize)

"------------------------------------
" operator-replace.vim
"------------------------------------
" replace Rw via yankring
map R <Plug>(operator-replace)

"------------------------------------
" sumartword.vim
"------------------------------------
noremap ,w  w
noremap ,b  b
noremap ,e  e
noremap ,ge  ge

map W  <Plug>(smartword-w)
map B  <Plug>(smartword-b)
map E  <Plug>(smartword-e)
map ge  <Plug>(smartword-ge)

"------------------------------------
" unite.vim
"------------------------------------
" all files
nnoremap <silent> <leader>uf  :<C-u>Unite -buffer-name=files file_rec/async:!<CR>
" all bufferlist
nnoremap <silent> <leader>ub  :<C-u>Unite buffer<CR>
" normal unite
nnoremap <silent> <leader>uu  :<C-u>Unite buffer file_mru<CR>
" show recent used files
nnoremap <silent> <leader>um  :<C-u>Unite file_mru<CR>
" show files from current directory
nnoremap <silent> <leader>ud  :<C-u>UniteWithBufferDir -no-split file<CR>

let g:unite_source_file_mru_limit = 200
let g:unite_source_rec_async_command='ag --nocolor --nogroup --ignore ".hg" --ignore ".svn" --ignore ".git" --ignore ".bzr" --hidden -g ""'

" unite-plugins
cnoremap UH Unite help<Enter>
cnoremap UO Unite outline<Enter>

"------------------------------------
" quickrun.vim
"------------------------------------
let g:quickrun_config = {}
let g:quickrun_config = {
\   "_" : {
\       "hook/close_unite_quickfix/enable_hook_loaded" : 1,
\       "hook/unite_quickfix/enable_failure" : 1,
\       "hook/close_quickfix/enable_exit" : 1,
\       "hook/close_buffer/enable_failure" : 1,
\       "hook/close_buffer/enable_empty_data" : 1,
\       "outputter" : "multi:buffer:quickfix",
\       "hook/shabadoubi_touch_henshin/enable" : 1,
\       "hook/shabadoubi_touch_henshin/wait" : 20,
\       "split" : "rightbelow",
\       "outputter/buffer/running_mark" : "",
\       "runner" : "vimproc",
\       "runner/vimproc/updatetime" : 40,
\   }
\}
"------------------------------------
" Pydiction
"------------------------------------
let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'

"------------------------------------
" Syntastic
"------------------------------------
" show as sign at eror
let g:syntastic_enable_signs = 1
" highlight if possible
let g:syntastic_enable_highlighting = 1
" Default off
let g:syntastic_mode_map = { 'mode': 'passive' }

"------------------------------------
" Indent-Guides
"------------------------------------
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#121212 ctermbg=233
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#262626 ctermbg=235
let g:indent_guides_enable_on_vim_startup = 1

"------------------------------------
" VIM-LESS
"------------------------------------
noremap <Leader>m :w <BAR> !lessc % > %:t:r.css<CR><space>

"------------------------------------
" vim-markdown-quote-syntax
"------------------------------------
let s:bundle = neobundle#get("vim-markdown-quote-syntax")
function! s:bundle.hooks.on_source(bundle)
  let g:markdown_quote_syntax_filetypes = {
        \ "coffee" : {
        \   "start" : "coffee",
        \},
        \ "css" : {
        \   "start" : "\\%(css\\|scss\\)",
        \},
      \}
endfunction
unlet s:bundle
