[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1

  " Completion starts more than 4 chars
  call deoplete#custom#source('_', 'min_pattern_length', 4)
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  autocmd vimrc BufEnter *
    \   if empty(&buftype)
    \|      nnoremap <buffer> <C-]> :<C-u>DeniteCursorWord -immediately-1 -highlight-matched-char=Normal -default-action=open yasuoza/tag<CR>
    \|  endif

  call denite#custom#var('file_rec', 'command', ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
  call denite#custom#source('yasuoza/tag', 'matchers', ['matcher/substring'])

  call denite#custom#map('insert', '<C-n>',
    \ '<denite:move_to_next_line>', 'noremap')
  call denite#custom#map('insert', '<C-p>',
    \ '<denite:move_to_previous_line>', 'noremap')

  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <CR>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> d
    \ denite#do_map('do_action', 'delete')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <Space>
    \ denite#do_map('toggle_select').'j'
  endfunction
'''

# NERD_commenter.vim :toggle comment via <Leader>c<space>
[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
  " put space between comment
  let NERDSpaceDelims = 1
  " do not show error although opening incorrect file
  let NERDShutUp=1
'''
# visually indent guide
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_char = 'Â¦'
'''
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add ='''
  nmap p <Plug>(yankround-p)
  xmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  xmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
  let g:yankround_dir = '~/.cache/nvim/yankround'
'''

# # viaualstar : search *
[[plugins]]
repo = 'thinca/vim-visualstar'

# # surround.vim : surround text and comment with parentheses
[[plugins]]
repo = 'vim-scripts/surround.vim'

# # vim-textobj-syntax : change selected text to text object
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-syntax.git'

# vim-textobj-fold : convet folded text to text object
[[plugins]]
repo = 'kana/vim-textobj-fold.git'

# vim-textobj-entire : convert buffer to text-object
[[plugins]]
repo = 'vim-scripts/textobj-entire'

# Speed up foldmethod
[[plugins]]
repo = 'Konfekt/FastFold'

# vim-smartword : smart word moving
[[plugins]]
repo = 'vim-scripts/smartword'

# matchit.vim : move to corresponding parentheses via %
[[plugins]]
repo = 'vim-scripts/matchit.zip'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'tpope/vim-fugitive'

# Cool status line
[[plugins]]
repo = 'bling/vim-airline'
[[plugins]]
repo = 'yasuoza/vim-airline-super-hybrid-theme'
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#buffer_nr_show = 1
  let g:airline#extensions#tabline#buffer_nr_format = '[%s]'
  let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

  " statusline
  let g:airline_powerline_fonts = 1  " Use powerline patched font
  let g:airline_section_c = '%F%m'   " Display full file path
  let g:airline#extensions#whitespace#enabled = 0
  let g:airline_theme='super_hybrid' " Use hybrid statusline theme

  " Disable coc integration
  let g:airline#extensions#coc#enabled = 0
'''
