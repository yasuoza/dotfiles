[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
colorscheme iceberg
'''
hook_post_source = '''
hi! Normal guibg=NONE ctermbg=NONE " Transparent background
hi! Visual ctermbg=236 guibg=#3C4154  " Change Visual color
'''

# NERD_commenter.vim :toggle comment via <Leader>c<space>
[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
" put space between comment
let NERDSpaceDelims = 1
" do not show error although opening incorrect file
let NERDShutUp=1
'''

# visually indent guide
[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
lua_post_source = '''
vim.opt.list = false -- Disable space mark
require'ibl'.setup {
  indent = {
    -- Customize indent mark
    char = "|",
  },

  scope = {
   show_start = false,
   show_end = false,
  }
}
'''

[[plugins]]
repo = 'kkharji/sqlite.lua'
[[plugins]]
repo = 'gbprod/yanky.nvim'
depends = [
  'kkharji/sqlite.lua'
]
lua_post_source = '''
-- For sqlite.lua
local os = vim.loop.os_uname().sysname
if os == "Darwin" then
  vim.g.sqlite_clib_path = '/usr/lib/sqlite3/libtclsqlite3.dylib'
end

local utils = require("yanky.utils")
local mapping = require("yanky.telescope.mapping")
require'yanky'.setup {
  ring = {
    storage = 'sqlite'
  },
  picker = {
    telescope = {
      use_default_mappings = false,
      mappings = {
        default = mapping.put("p"),
        i = {
          ["<c-y>"] = mapping.set_register(utils.get_default_register()),
        },
      },
    },
  },
  highlight = {
    on_put = false,
    on_yank = false,
  },
}

vim.keymap.set({"n","x"}, "p", "<Plug>(YankyPutAfter)")
vim.keymap.set({"n","x"}, "P", "<Plug>(YankyPutBefore)")
vim.keymap.set({"n","x"}, "gp", "<Plug>(YankyGPutAfter)")
vim.keymap.set({"n","x"}, "gP", "<Plug>(YankyGPutBefore)")
vim.keymap.set("n", "<c-p>", "<Plug>(YankyCycleForward)") -- Previous
vim.keymap.set("n", "<c-n>", "<Plug>(YankyCycleBackward)") -- Next
'''

# viaualstar : search *
[[plugins]]
repo = 'thinca/vim-visualstar'

# surround.vim : surround text and comment with parentheses
[[plugins]]
repo = 'vim-scripts/surround.vim'
hook_add = '''
let g:surround_no_insert_mappings = 1
'''

# Insert or delete brackets, parens, quotes in pair
[[plugins]]
repo = 'LunarWatcher/auto-pairs'
hook_add = '''
" Disable `{|word` to be `{|}word`
let g:AutoPairsCompleteOnlyOnSpace = 1

" Disable mappings
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutFastWrap = ''
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutBackInsert = ''
let g:AutoPairsShortcutIgnore = ''
let g:AutoPairsShortcutToggleMultilineClose = ''
let g:AutoPairsMoveExpression = ''

" Backspace and Ctrl-H delete pairs
let g:AutoPairsMapBS = 1
inoremap <silent> <C-h> <C-R>=autopairs#AutoPairsDelete()<CR>
'''

# vim-textobj-syntax : change selected text to text object
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-syntax.git'

# vim-textobj-fold : convet folded text to text object
[[plugins]]
repo = 'kana/vim-textobj-fold.git'

# vim-textobj-entire : convert buffer to text-object
[[plugins]]
repo = 'vim-scripts/textobj-entire'

# Speed up foldmethod
[[plugins]]
repo = 'Konfekt/FastFold'

# vim-smartword : smart word moving
[[plugins]]
repo = 'vim-scripts/smartword'

# Replace matchit.vim
[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
let g:matchup_matchparen_deferred = 1 " improves cursor movement performance
let g:matchup_matchparen_deferred_show_delay = 100 " slow deferred highlighting
let g:matchup_matchparen_deferred_hide_delay = 100 " fast highlighting disappears
let g:matchup_matchparen_stopline = 100  " for match highlighting only
let g:matchup_matchparen_offscreen = {} " Disable statusline entry

" mappings
let g:matchup_motion_enabled = 0
nnoremap <silent> %
        \ :<c-u>call matchup#motion#find_matching_pair(0, 1)<cr>
xnoremap <silent> %
        \ :<c-u>call matchup#motion#find_matching_pair(1, 1)<cr>
xmap     <silent> <plug>(matchup-%) <sid>(matchup-%)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'mattn/vim-molder'

[[plugins]]
repo = 'github/copilot.vim'
lua_post_source = '''
vim.b.copilot_enabled = true
vim.g.copilot_no_tab_map = true

local keymap = vim.keymap.set
keymap(
  "i",
  "<C-f>",
  'copilot#Accept("<right>")',
  { silent = true, expr = true, script = true, replace_keycodes = false }
)
keymap(
  "i",
  "<C-j>",
  function()
      local s = vim.call("copilot#GetDisplayedSuggestion")
      if s.text == nil or s.text == "" then
          return vim.api.nvim_replace_termcodes([[<Esc>]], true, true, true)
      else
          return vim.call("copilot#Next")
      end
  end,
  { silent = true, expr = true, script = true, replace_keycodes = false }
)
keymap("i", "<C-k>", "<Plug>(copilot-previous)")
keymap("i", "<C-g>", "<Plug>(copilot-dismiss)")
keymap("i", "<C-s>", "<Plug>(copilot-suggest)")
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
lua_post_source = '''
require'nvim-treesitter.configs'.setup {
  ensure_installed = "all",
  ignore_install = { "phpdoc" },

  matchup = {
    enable = true,
    disable_virtual_text = true,
  },

  highlight = {
    enable = true,
  },
}
'''
hook_post_update = 'TSUpdateSync'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
build = 'make'
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = [
  'nvim-lua/plenary.nvim',
  'nvim-telescope/telescope-fzf-native.nvim',
]
lua_post_source = '''
local actions = require("telescope.actions")
require'telescope'.setup {
  defaults = {
    sorting_strategy = "ascending",
    mappings = {
      i = {
        ["<esc>"] = actions.close,
        ["<C-g>"] = actions.close,

        ["<C-k>"] = actions.preview_scrolling_up,
        ["<C-j>"] = actions.preview_scrolling_down,
      },
    },
    layout_config = {
      prompt_position = "top",
      width = 0.90,
      preview_width = 0.50,
    },
    preview = {
      treesitter = true,
    },
  },

  pickers = {
    buffers = {
      mappings = {
        i = {
          ["<c-d>"] = require("telescope.actions").delete_buffer,
        },
      }
    }
  },
}

-- To get fzf loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
require('telescope').load_extension('fzf')

-- keymaps and commands

vim.keymap.set('n', [[<C-\>]], require("telescope.builtin").find_files, { silent = true })
vim.keymap.set('n', '<Leader>lb', require("telescope.builtin").buffers, { silent = true })

if vim.fn.executable('rg') then
  vim.api.nvim_create_user_command('Rg', require("telescope.builtin").live_grep, { nargs = 0 })
  vim.api.nvim_create_user_command('Rgw', function() require("telescope.builtin").grep_string({ word_match="-w" }) end, { nargs = 0 })
end

-- yanky.nvim integration
if vim.fn.exists(':YankyRingHistory') then
  vim.keymap.set(
    'n',
    '<Leader>ly',
    require("telescope").extensions.yank_history.yank_history,
    { silent = true }
  )
end
'''

[[plugins]]
repo = 'kdheepak/tabline.nvim'
lua_post_source = '''
require'tabline'.setup {
  options = {
    show_bufnr = true,
    show_tabs_always = false,
  }
}
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
lua_post_source = '''
require'lualine'.setup {
  options = {
    theme = 'iceberg',
  },
  sections = {
    lualine_c = {
      {
        'filename',
        path = 1, -- Show relative path
      }
    },
    lualine_x = {
      'encoding', 'filetype',
    },
  },
}
'''
