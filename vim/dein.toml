[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
colorscheme iceberg
'''
hook_post_source = '''
hi! Normal guibg=NONE ctermbg=NONE " Transparent background
hi! Visual ctermbg=236 guibg=#3C4154  " Change Visual color
'''

# NERD_commenter.vim :toggle comment via <Leader>c<space>
[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
" put space between comment
let NERDSpaceDelims = 1
" do not show error although opening incorrect file
let NERDShutUp=1
'''

# visually indent guide
[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
hook_post_source = '''
lua << END
vim.opt.list = false -- Disable space mark
require'indent_blankline'.setup {
  -- Customize indent mark
  char = 'Â¦',

  -- Disable the first column indent display
  show_first_indent_level = false,
}
END
'''

[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add ='''
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
let g:yankround_dir = '~/.cache/nvim/yankround'
let g:yankround_max_history = 100
'''

# viaualstar : search *
[[plugins]]
repo = 'thinca/vim-visualstar'

# surround.vim : surround text and comment with parentheses
[[plugins]]
repo = 'vim-scripts/surround.vim'
hook_add = '''
let g:surround_no_insert_mappings = 1
'''

# Insert or delete brackets, parens, quotes in pair
[[plugins]]
repo = 'LunarWatcher/auto-pairs'
hook_add = '''
" Disable `{|word` to be `{|}word`
let g:AutoPairsCompleteOnlyOnSpace = 1

" Disable mappings
let g:AutoPairsShortcutToggle = ''
let g:AutoPairsShortcutFastWrap = ''
let g:AutoPairsShortcutJump = ''
let g:AutoPairsShortcutBackInsert = ''
let g:AutoPairsShortcutIgnore = ''
let g:AutoPairsShortcutToggleMultilineClose = ''
let g:AutoPairsMoveExpression = ''

" Backspace and Ctrl-H delete pairs
let g:AutoPairsMapBS = 1
inoremap <silent> <C-h> <C-R>=autopairs#AutoPairsDelete()<CR>
'''

# vim-textobj-syntax : change selected text to text object
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-syntax.git'

# vim-textobj-fold : convet folded text to text object
[[plugins]]
repo = 'kana/vim-textobj-fold.git'

# vim-textobj-entire : convert buffer to text-object
[[plugins]]
repo = 'vim-scripts/textobj-entire'

# Speed up foldmethod
[[plugins]]
repo = 'Konfekt/FastFold'

# vim-smartword : smart word moving
[[plugins]]
repo = 'vim-scripts/smartword'

# Replace matchit.vim
[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
let g:matchup_matchparen_deferred = 1 " improves cursor movement performance
let g:matchup_matchparen_deferred_show_delay = 100 " slow deferred highlighting
let g:matchup_matchparen_deferred_hide_delay = 100 " fast highlighting disappears
let g:matchup_matchparen_stopline = 100  " for match highlighting only
let g:matchup_matchparen_offscreen = {} " Disable statusline entry

" mappings
let g:matchup_motion_enabled = 0
nnoremap <silent> %
        \ :<c-u>call matchup#motion#find_matching_pair(0, 1)<cr>
xnoremap <silent> %
        \ :<c-u>call matchup#motion#find_matching_pair(1, 1)<cr>
xmap     <silent> <plug>(matchup-%) <sid>(matchup-%)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'mattn/vim-molder'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_post_source = '''
lua << END
require'nvim-treesitter.configs'.setup {
  ensure_installed = "all",
  ignore_install = { "phpdoc", "markdown" },

  matchup = {
    enable = true,
  },

  highlight = {
    enable = true,
  },
}
END
'''
hook_post_update = 'TSUpdateSync'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
[[plugins]]
repo = 'nvim-telescope/telescope-fzf-native.nvim'
build = 'make'
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = [
  'nvim-lua/plenary.nvim',
  'nvim-telescope/telescope-fzf-native.nvim',
]
hook_add = '''
nnoremap <silent> <C-\> <cmd>Telescope find_files<cr>
nnoremap <silent> <Leader>lb <cmd>Telescope buffers<cr>
if executable('rg')
  command! Rg Telescope live_grep
  command! Rgw Telescope grep_string word_match=-w
endif
'''
hook_post_source = '''
lua << END
local actions = require("telescope.actions")
require'telescope'.setup {
  defaults = {
    sorting_strategy = "ascending",
    mappings = {
      i = {
        ["<esc>"] = actions.close,
        ["<C-g>"] = actions.close,
      },
    },
    layout_config = {
      prompt_position = "top",
      width = 0.90,
      preview_width = 0.50,
    },
    preview = {
      treesitter = true,
    },
  },
}

-- To get fzf loaded and working with telescope, you need to call
-- load_extension, somewhere after setup function:
require('telescope').load_extension('fzf')
END
'''

[[plugins]]
repo = 'kdheepak/tabline.nvim'
hook_post_source = '''
lua << END
require'tabline'.setup {
  options = {
    show_bufnr = true,
    show_tabs_always = false,
  }
}
END
'''

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
hook_post_source = '''
lua << END
require'lualine'.setup {
  options = {
    theme = 'iceberg',
  },
  sections = {
    lualine_c = {
      {
        'filename',
        path = 1, -- Show relative path
      }
    },
    lualine_x = {
      'encoding', 'filetype',
    },
  },
}
END
'''
